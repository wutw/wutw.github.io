<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端分享</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wutw.github.io/"/>
  <updated>2018-02-28T13:20:20.752Z</updated>
  <id>http://wutw.github.io/</id>
  
  <author>
    <name>wtw</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack 与 gulp 问题与解决</title>
    <link href="http://wutw.github.io//404.html"/>
    <id>http://wutw.github.io//404.html</id>
    <published>2017-10-19T06:39:49.000Z</published>
    <updated>2018-02-28T13:20:20.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack-与-gulp-问题与解决"><a href="#webpack-与-gulp-问题与解决" class="headerlink" title="webpack 与 gulp 问题与解决"></a>webpack 与 gulp 问题与解决</h1><p>项目地址：<a href="https://github.com/wutw/webAuto/" target="_blank" rel="external">https://github.com/wutw/webAuto/</a></p><h2 id="问题与解决"><a href="#问题与解决" class="headerlink" title="问题与解决"></a>问题与解决</h2><ol><li>用import载入模块，报错 :unexpected token import<br><p>原因：浏览器不能识别es6,编译时确保所有模块用babel解析为es5</p><br><p>解决：&lt; <a href="https://elanderson.net/2016/09/unexpected-token-import-with-gulp/" target="_blank" rel="external">https://elanderson.net/2016/09/unexpected-token-import-with-gulp/</a> &gt; </p><br>新建.babelrc文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> &quot;presets&quot;: [ &quot;es2015&quot;]</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>将gulpfile.js改为gulpfile.babel.js</p><ol><li><p>错误：Maximum call stack size exceeded</p><p>原因： npm版本与配套node不搭，npm降级处理</p><br><p>解决： 命令行：npm install npm@4.4.4 -g </p><br>注：windows下nvm版本切换有问题<br>node路径在C:\node\nodejs ，nvm list 当前下载node版本， nvm use 8.7.0会在node路径替换为相应版本，但不知道为什么输node -v不变<br><p>相应node版本里如C:\node\nvm\v8.7.0有默认下载的npm，复制到C:\node\nvm\npm\node_modules\npm里可直接替换</p></li><li><p>在gulp.watch里只写主路径，写第二个路径会报错</p></li><li><p>webpack打包后保错jQuery is not defined<br> 原因：jQuery未映射到全局  </p><p> 解决 <a href="http://m.blog.csdn.net/qq129169/article/details/71734863" target="_blank" rel="external">http://m.blog.csdn.net/qq129169/article/details/71734863</a>   方法4不错<br> 建立jquery-vendor.js</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import $ from &apos;jquery&apos;;</div><div class="line">window.$ = $;</div><div class="line">window.jQuery = $;</div><div class="line">export default $;</div></pre></td></tr></table></figure></li></ol><pre><code>在gulpfile.babel.js配置</code></pre>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">                      test: /[\/\\]node_modules[\/\\]some-module[\/\\]index\.js$/,</div><div class="line">                      loader: &quot;imports-loader?this=&gt;window&quot;//将jquery映射为全局</div><div class="line">              &#125;,</div></pre></td></tr></table></figure><p>  在js里import $ from  ‘./jquery-vendor.js’即可<br>  <a href="https://stackoverflow.com/questions/28969861/managing-jquery-plugin-dependency-in-webpack" target="_blank" rel="external">https://stackoverflow.com/questions/28969861/managing-jquery-plugin-dependency-in-webpack</a></p><ol><li>浏览器同步更新使用browser-sync插件， 全局安装，静态页通过单独的端口访问可视化控制页面。可视化界面允许控制所有的设备，同步推送更新等<br>等。</li></ol><ul><li>用gulp任务，启动browser-sync会给默认localhost:3000到静态页入口。 baseDir是根目录，其它页面换url即可</li><li>未用gulp任务，直接在命令行输入下列命令，实现不同浏览器同步更新，便于调试：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// --files 路径是相对于运行该命令的项目（目录） </div><div class="line">browser-sync start --server --files &quot;css/*.css, *.html&quot;</div><div class="line">// 如果你的文件层级比较深，您可以考虑使用 **（表示任意目录）匹配，任意目录下任意.css 或 .html文件。 </div><div class="line">browser-sync start --server --files &quot;**/*.css, **/*.html&quot;</div></pre></td></tr></table></figure></li></ul><ol><li>对应第三方插件<ul><li>目前bootstrap，不能直接import，无用，bootstrap用html引用，用bootstrap.js时要引用jquery</li><li>其它使用jquery的插件可以打包引用</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;webpack-与-gulp-问题与解决&quot;&gt;&lt;a href=&quot;#webpack-与-gulp-问题与解决&quot; class=&quot;headerlink&quot; title=&quot;webpack 与 gulp 问题与解决&quot;&gt;&lt;/a&gt;webpack 与 gulp 问题与解决&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DOM类型</title>
    <link href="http://wutw.github.io//404.html"/>
    <id>http://wutw.github.io//404.html</id>
    <published>2017-10-19T06:39:49.000Z</published>
    <updated>2017-10-19T11:20:00.354Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Node-类型："><a href="#1-Node-类型：" class="headerlink" title="1. Node 类型："></a>1. Node 类型：</h3><p> <span style="color:#f55e39"><strong>属性</strong></span>: nodeType, nodeValue ,nodeName节点类型，值、名;<br>                                         childNodes,其中保存着NodeList对象，NodeList对象是一种数组对象，用来保存一组有序节点，可用方括号访问。（childNodes[0] == firstChild）<br>                                          parentNode，指向文档树的父节点,previousSibling,nextSibling属性，可以访问同一列表其它节点,<br>                                          ownerDocument:指向整个文档的文档节点<br>  <span style="color:#f55e39"><strong>Node操作</strong></span>：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> var returnedNode = someNode.appendChild(newNode)//插入到最后一个元素</div><div class="line"> var returnedNode = someNode.insertBefore(newNode,null);//插入后成为最后一个节点</div><div class="line">  //insertBefore()方法接受两个参数，要插入的节点及作为参考的节点</div><div class="line"> var returnedNode = someNode.insertBefore(newNode，someNode.firstChild);//插入成为第一个子节点</div><div class="line"> var returnedNode = someNode.replaceChild(newNode , someNode.firstChild);//替换第一个子节点</div><div class="line">var returnedNode = someNode.removeChild(newNode , someNode.firstChild);//移除第一个子节点</div></pre></td></tr></table></figure></p><h3 id="2-Document-类型："><a href="#2-Document-类型：" class="headerlink" title="2. Document 类型："></a>2. Document 类型：</h3><p>document对象是HTMLDocument（继承自Document类型）的一个实例，表整个HTML页面<br>Document节点的子节点：DocumentType,Element,Processing，Instruction,Comment<br>  <span style="color:#f55e39"><strong>访问子节点属性</strong></span>：documentElement属性，指向html页面中<html>元素<br>                                                      body属性，指向<body>元素<br>                                                      doctype属性，对&lt;!DOCTYPE&gt;调用</body></html></p><p> <span style="color:#f55e39"><strong>文档信息</strong></span>：document对象有些标准Document对象所没有的属性，有：<br>               title属性，指向\<title\><br>               URL属性，指向页面链接完整的URL,<br>               domain属性，页面域名<br>                referrer属性，链接到当前页面的URL，<br> <span style="color:#f55e39"><strong>查找元素</strong></span>：getElementById(),<br>                   getElementsByTagName(‘img’) //接受一个参数，返回包含0个或多个元素的NodeList，而在html里，会返回一个HtmlCollection对象。（HtmlCollection对象的方法：namedItem(),可以通过元素的name特性取得集合的项）<br>                    getElementsByName()// 只有HTMLDocument类型才有的方法，返回带有给定name特性的所有元素。</title\></p><h3 id="3-Element类型-："><a href="#3-Element类型-：" class="headerlink" title="3. Element类型 ："></a>3. Element类型 ：</h3><p>节点的nodeName等于tagNamejstree kb案例.note<br>                             父节点是Element或Document，<br>HTML元素是由HTMLElement或者更具体的子类表示：<br>                    属性：id ,className, title，textContent<br>                html   元素：button，form，body,input等<br> <span style="color:#f55e39"><strong>特性操作</strong></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;myDiv&quot;&gt; &lt;/div&gt;</div><div class="line">var div = document.getElementById(&apos;myDiv&quot;);</div></pre></td></tr></table></figure><p><strong>取得特性</strong>：alert(div.getAttribute(“id”));   //id,class CSS类,title附加说明信息,lang,dir语言方向<br><strong>设置特性</strong>：div.setAttribute(“id”,”someOtherId”);<br><strong>删除特性</strong>：div.removeAttribute(“id”);</p><p> <span style="color:#f55e39"><strong>attributes属性</strong></span>：Element是使用attributes属性唯一一个DOM节点类型，<br>attributes属性包含一个NameNodeMap对象，该对象有如下方法：<br>    getNamedItem(name):返回nodeName属性等于name的节点，可写成[name]<br>    removeNamedItem(name):移除nodeName属性等于name的节点，相当于removeAttribute（）<br>    setNamedItem(node):向列表添加节点<br>    item(pos)返回位于pos位置处的节点<br>attributes属性包含一系列节点，每个节点的nodeName就是特性的名称，节点的nodeValue就是特性的值，length为节点元素长度<br>  比如<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var  id = element.attributes.getNamedItem( &quot;id&quot;).nodeValue;</div></pre></td></tr></table></figure></p><p><strong>创建元素</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var  div = document.createElement(&quot;div&quot;);</div></pre></td></tr></table></figure></p><h3 id="4-Text类型："><a href="#4-Text类型：" class="headerlink" title="4. Text类型："></a>4. Text类型：</h3><p>纯文本内容，可包含转义后html字符，不含html代码。<br>                        Text节点parentNode是一个Element，<br><span style="color:#f55e39"><strong>创建文本节点</strong></span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.createTextNode(&quot;&lt;strong&gt; Hello &lt;/strong&gt;&quot;)</div></pre></td></tr></table></figure></p><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> var element  = document.createElement(&quot;div&quot;);//创建元素</div><div class="line"> element.className = &quot;message&quot;;//Element属性</div><div class="line"> var textNode = document.createTextNode(&quot;hello world&quot;);//创建Text类型</div><div class="line">element.appendChild(textNode);//插入到div中</div></pre></td></tr></table></figure></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.body.appendChild(element);//将div插入到body中</div></pre></td></tr></table></figure><h3 id="5-Comment类型-："><a href="#5-Comment类型-：" class="headerlink" title="5. Comment类型 ："></a>5. Comment类型 ：</h3><p>注释，parentNode是一个Element或Document</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Node-类型：&quot;&gt;&lt;a href=&quot;#1-Node-类型：&quot; class=&quot;headerlink&quot; title=&quot;1. Node 类型：&quot;&gt;&lt;/a&gt;1. Node 类型：&lt;/h3&gt;&lt;p&gt; &lt;span style=&quot;color:#f55e39&quot;&gt;&lt;strong
      
    
    </summary>
    
    
  </entry>
  
</feed>
